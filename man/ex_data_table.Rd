% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/relop_drop_columns.R, R/relop_extend.R,
%   R/relop_natural_join.R, R/relop_non_sql.R, R/relop_null_replace.R,
%   R/relop_orderby.R, R/relop_rename_columns.R, R/relop_select_columns.R,
%   R/relop_select_rows.R, R/relop_sql.R, R/relop_table_source.R,
%   R/relop_theta_join.R, R/relop_unionall.R, R/rquery_fns.R
\name{ex_data_table.relop_drop_columns}
\alias{ex_data_table.relop_drop_columns}
\alias{ex_data_table.relop_extend}
\alias{ex_data_table.relop_natural_join}
\alias{ex_data_table.relop_non_sql}
\alias{ex_data_table.relop_null_replace}
\alias{ex_data_table.relop_orderby}
\alias{ex_data_table.relop_rename_columns}
\alias{ex_data_table.relop_select_columns}
\alias{ex_data_table.relop_select_rows}
\alias{ex_data_table.relop_sql}
\alias{ex_data_table.relop_table_source}
\alias{ex_data_table.relop_theta_join}
\alias{ex_data_table.relop_unionall}
\alias{ex_data_table}
\alias{ex_data_table.default}
\title{Execute a pipeline with \code{data.table} sources.}
\usage{
\method{ex_data_table}{relop_drop_columns}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_extend}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_natural_join}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_non_sql}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_null_replace}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_orderby}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_rename_columns}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_select_columns}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_select_rows}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_sql}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_table_source}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_theta_join}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

\method{ex_data_table}{relop_unionall}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())

ex_data_table(optree, ..., tables = list(), source_usage = NULL,
  env = parent.frame())

\method{ex_data_table}{default}(optree, ..., tables = list(),
  source_usage = NULL, env = parent.frame())
}
\arguments{
\item{optree}{relop operations tree.}

\item{...}{not used, force later arguments to bind by name.}

\item{tables}{named list map from table names used in nodes to data.tables and data.frames.}

\item{source_usage}{list mapping source table names to vectors of columns used.}

\item{env}{environment to work in.}
}
\value{
resulting data.table (intermediate tables can somtimes be mutated as is practice with data.table).
}
\description{
\code{data.table}s are looked for by name in the \code{tables} argument and in the execution environment.

Throw on error if this method is called, signalling that a specific \code{data.table} implemetation is needed for this method.
}
\details{
\itemize{
 \item \code{relop_drop_columns}: implement drop columns
 \item \code{relop_extend}: implement extend/assign operator
 \item \code{relop_natural_join}: implement natural join
 \item \code{relop_non_sql}: direct function (non-sql) operator (not implemented for \code{data.table})
 \item \code{relop_null_replace}: implement NA/NULL replacement
 \item \code{relop_orderby}: implement row ordering
 \item \code{relop_project}: implement row ordering
 \item \code{relop_rename_columns}: implement column renaming
 \item \code{relop_select_columns}: implement select columns
 \item \code{relop_select_rows}: implement select rows
 \item \code{relop_sql}: direct sql operator (not implemented for \code{data.table})
 \item \code{relop_table_source}: implement data source
 \item \code{relop_theta_join}: implement theta join
 \item \code{relop_unionall}: implement row binding
}
}
\section{Methods (by class)}{
\itemize{
\item \code{relop_drop_columns}: implement drop columns

\item \code{relop_extend}: implement extend/assign operator

\item \code{relop_natural_join}: implement natural join

\item \code{relop_non_sql}: implement direct function (non-sql) operator

\item \code{relop_null_replace}: implement NA/NULL replacement

\item \code{relop_orderby}: implement row ordering

\item \code{relop_rename_columns}: implement column renaming

\item \code{relop_select_columns}: implement select columns

\item \code{relop_select_rows}: implement select rows

\item \code{relop_sql}: implement direct sql operator

\item \code{relop_table_source}: implement data source

\item \code{relop_theta_join}: implement theta join

\item \code{relop_unionall}: implement row binding

\item \code{default}: signal no implementation for given class
}}

\examples{

  a <- data.table::data.table(x = c(1, 2) , y = c(20, 30), z = c(300, 400))
  optree <- local_td(a) \%.>\%
     select_columns(., c("x", "y")) \%.>\%
     select_rows_nse(., x<2 & y<30)
  cat(format(optree))
  print(ex_data_table(optree))

}
